#!/usr/bin/env node

// Enhanced build script that skips TypeScript type checking
// but still transpiles TypeScript to JavaScript

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üé≠ Building backend with transpile-only mode (skipping type checking)...');

try {
  // Ensure the dist directory exists
  if (!fs.existsSync(path.join(__dirname, 'dist'))) {
    fs.mkdirSync(path.join(__dirname, 'dist'));
  }
  
  // Ensure the data directory exists in dist
  if (!fs.existsSync(path.join(__dirname, 'dist', 'data'))) {
    fs.mkdirSync(path.join(__dirname, 'dist', 'data'), { recursive: true });
  }
  
  // Ensure the logs directory exists in dist
  if (!fs.existsSync(path.join(__dirname, 'dist', 'logs'))) {
    fs.mkdirSync(path.join(__dirname, 'dist', 'logs'), { recursive: true });
  }

  // Using ts-node to transpile TS to JS (without type checking)
  console.log('Running TypeScript compilation in transpile-only mode...');
  execSync('npx tsc --skipLibCheck --noEmit false --outDir ./dist', { 
    stdio: 'inherit',
    env: { ...process.env, TS_NODE_TRANSPILE_ONLY: 'true' }
  });
    // Create main.js redirector that points to entry.js
  const mainJsContent = `// Generated by build script
// This is the main entry point for running the application
console.log('Starting server from main entry point');
try {
  require('./entry');
} catch (error) {
  console.error('Error starting from main entry point:', error);
  process.exit(1);
}
`;

  fs.writeFileSync(
    path.join(__dirname, 'dist', 'main.js'),
    mainJsContent
  );
  console.log('Created main.js that redirects to entry.js');
  
  // Copy package.json to dist for reference
  fs.copyFileSync(
    path.join(__dirname, 'package.json'),
    path.join(__dirname, 'dist', 'package.json')
  );

  // Ensure data files exist
  if (!fs.existsSync(path.join(__dirname, 'dist', 'data', 'config.json'))) {
    console.log('Creating default config.json...');
    const defaultConfig = {
      artNetConfig: {
        ip: "192.168.1.199",
        subnet: 0,
        universe: 0,
        net: 0,
        port: 6454,
        base_refresh_interval: 1000
      },
      midiMappings: {}
    };
    
    fs.writeFileSync(
      path.join(__dirname, 'dist', 'data', 'config.json'),
      JSON.stringify(defaultConfig, null, 2)
    );
  }
  
  if (!fs.existsSync(path.join(__dirname, 'dist', 'data', 'scenes.json'))) {
    console.log('Creating default scenes.json...');
    fs.writeFileSync(
      path.join(__dirname, 'dist', 'data', 'scenes.json'),
      JSON.stringify([], null, 2)
    );
  }
  
  // Copy any existing configuration files if they exist
  if (fs.existsSync(path.join(__dirname, 'data'))) {
    console.log('Copying data directory...');
    copyDir(path.join(__dirname, 'data'), path.join(__dirname, 'dist', 'data'));
  }
  
  // Copy static files if they exist
  if (fs.existsSync(path.join(__dirname, 'src', 'public'))) {
    console.log('Copying static files...');
    copyDir(path.join(__dirname, 'src', 'public'), path.join(__dirname, 'dist', 'public'));
  }
  
  console.log('‚ú® Backend build completed successfully (with type checking skipped)!');
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  console.error(error);
  process.exit(1);
}

// Helper function to copy directories recursively
function copyDir(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}